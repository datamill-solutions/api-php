<?php
/**
 * DataMillApi
 * PHP version 5
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataMill;

use \DataMill\ApiClient;
use \DataMill\ApiException;
use \DataMill\Configuration;
use \DataMill\ObjectSerializer;

/**
 * DataMillApi Class Doc Comment
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataMillApi
{
    /**
     * API Client
     *
     * @var \DataMill\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataMill\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataMill\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.methis.at');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataMill\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataMill\ApiClient $apiClient set the API client
     *
     * @return DataMillApi
     */
    public function setApiClient(\DataMill\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation checkBIC
     *
     * Check BIC for spelling
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $bic BIC to be checked (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\BicCheckResponse
     */
    public function checkBIC($license, $guid, $bic)
    {
        list($response) = $this->checkBICWithHttpInfo($license, $guid, $bic);
        return $response;
    }

    /**
     * Operation checkBICWithHttpInfo
     *
     * Check BIC for spelling
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $bic BIC to be checked (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\BicCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkBICWithHttpInfo($license, $guid, $bic)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling checkBIC');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkBIC, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkBIC, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling checkBIC');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.checkBIC, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'bic' is set
        if ($bic === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bic when calling checkBIC');
        }
        if ((strlen($bic) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$bic" when calling DataMillApi.checkBIC, must be smaller than or equal to 255.');
        }
        if ((strlen($bic) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$bic" when calling DataMillApi.checkBIC, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/bic/check";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($bic !== null) {
            $formParams['bic'] = $this->apiClient->getSerializer()->toFormValue($bic);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\BicCheckResponse',
                '/bic/check'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\BicCheckResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\BicCheckResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkEmailDomain
     *
     * Check email syntax and mail server domain
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $email The email address to be checked (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\EmailDomainCheckResponse
     */
    public function checkEmailDomain($license, $guid, $email)
    {
        list($response) = $this->checkEmailDomainWithHttpInfo($license, $guid, $email);
        return $response;
    }

    /**
     * Operation checkEmailDomainWithHttpInfo
     *
     * Check email syntax and mail server domain
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $email The email address to be checked (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\EmailDomainCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkEmailDomainWithHttpInfo($license, $guid, $email)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling checkEmailDomain');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkEmailDomain, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkEmailDomain, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling checkEmailDomain');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.checkEmailDomain, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling checkEmailDomain');
        }
        if ((strlen($email) > 320)) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling DataMillApi.checkEmailDomain, must be smaller than or equal to 320.');
        }
        if ((strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling DataMillApi.checkEmailDomain, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/email/domain/check";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\EmailDomainCheckResponse',
                '/email/domain/check'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\EmailDomainCheckResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\EmailDomainCheckResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkEmailMailbox
     *
     * Check email syntax, mail server domain and mailbox itself
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $email The email address to be checked (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\EmailExtendedCheckResponse
     */
    public function checkEmailMailbox($license, $guid, $email)
    {
        list($response) = $this->checkEmailMailboxWithHttpInfo($license, $guid, $email);
        return $response;
    }

    /**
     * Operation checkEmailMailboxWithHttpInfo
     *
     * Check email syntax, mail server domain and mailbox itself
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $email The email address to be checked (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\EmailExtendedCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkEmailMailboxWithHttpInfo($license, $guid, $email)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling checkEmailMailbox');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkEmailMailbox, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkEmailMailbox, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling checkEmailMailbox');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.checkEmailMailbox, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling checkEmailMailbox');
        }
        if ((strlen($email) > 320)) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling DataMillApi.checkEmailMailbox, must be smaller than or equal to 320.');
        }
        if ((strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling DataMillApi.checkEmailMailbox, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/email/extended/check";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\EmailExtendedCheckResponse',
                '/email/extended/check'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\EmailExtendedCheckResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\EmailExtendedCheckResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkEmailSyntax
     *
     * Check email syntax
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $email The email address to be checked (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\EmailSyntaxCheckResponse
     */
    public function checkEmailSyntax($license, $guid, $email)
    {
        list($response) = $this->checkEmailSyntaxWithHttpInfo($license, $guid, $email);
        return $response;
    }

    /**
     * Operation checkEmailSyntaxWithHttpInfo
     *
     * Check email syntax
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $email The email address to be checked (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\EmailSyntaxCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkEmailSyntaxWithHttpInfo($license, $guid, $email)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling checkEmailSyntax');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkEmailSyntax, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkEmailSyntax, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling checkEmailSyntax');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.checkEmailSyntax, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling checkEmailSyntax');
        }
        if ((strlen($email) > 320)) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling DataMillApi.checkEmailSyntax, must be smaller than or equal to 320.');
        }
        if ((strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling DataMillApi.checkEmailSyntax, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/email/syntax/check";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\EmailSyntaxCheckResponse',
                '/email/syntax/check'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\EmailSyntaxCheckResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\EmailSyntaxCheckResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkIBAN
     *
     * Check IBAN for spelling
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $iban IBAN to be checked. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\IbanCheckResponse
     */
    public function checkIBAN($license, $guid, $iban)
    {
        list($response) = $this->checkIBANWithHttpInfo($license, $guid, $iban);
        return $response;
    }

    /**
     * Operation checkIBANWithHttpInfo
     *
     * Check IBAN for spelling
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $iban IBAN to be checked. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\IbanCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkIBANWithHttpInfo($license, $guid, $iban)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling checkIBAN');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkIBAN, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkIBAN, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling checkIBAN');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.checkIBAN, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'iban' is set
        if ($iban === null) {
            throw new \InvalidArgumentException('Missing the required parameter $iban when calling checkIBAN');
        }
        if ((strlen($iban) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$iban" when calling DataMillApi.checkIBAN, must be smaller than or equal to 255.');
        }
        if ((strlen($iban) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$iban" when calling DataMillApi.checkIBAN, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/iban/check";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($iban !== null) {
            $formParams['iban'] = $this->apiClient->getSerializer()->toFormValue($iban);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\IbanCheckResponse',
                '/iban/check'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\IbanCheckResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\IbanCheckResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkMobilePhone
     *
     * Verify mobile phone number
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $phonenumber Mobile phone number to be verified. (required)
     * @param string $countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\PhoneMobileCheckResponse
     */
    public function checkMobilePhone($license, $guid, $phonenumber, $countrycode)
    {
        list($response) = $this->checkMobilePhoneWithHttpInfo($license, $guid, $phonenumber, $countrycode);
        return $response;
    }

    /**
     * Operation checkMobilePhoneWithHttpInfo
     *
     * Verify mobile phone number
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $phonenumber Mobile phone number to be verified. (required)
     * @param string $countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\PhoneMobileCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkMobilePhoneWithHttpInfo($license, $guid, $phonenumber, $countrycode)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling checkMobilePhone');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkMobilePhone, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkMobilePhone, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling checkMobilePhone');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.checkMobilePhone, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'phonenumber' is set
        if ($phonenumber === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phonenumber when calling checkMobilePhone');
        }
        if ((strlen($phonenumber) > 128)) {
            throw new \InvalidArgumentException('invalid length for "$phonenumber" when calling DataMillApi.checkMobilePhone, must be smaller than or equal to 128.');
        }
        if ((strlen($phonenumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$phonenumber" when calling DataMillApi.checkMobilePhone, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'countrycode' is set
        if ($countrycode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $countrycode when calling checkMobilePhone');
        }
        if ((strlen($countrycode) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$countrycode" when calling DataMillApi.checkMobilePhone, must be smaller than or equal to 2.');
        }
        if ((strlen($countrycode) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$countrycode" when calling DataMillApi.checkMobilePhone, must be bigger than or equal to 2.');
        }

        // parse inputs
        $resourcePath = "/phone/mobile/check";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($phonenumber !== null) {
            $formParams['phonenumber'] = $this->apiClient->getSerializer()->toFormValue($phonenumber);
        }
        // form params
        if ($countrycode !== null) {
            $formParams['countrycode'] = $this->apiClient->getSerializer()->toFormValue($countrycode);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\PhoneMobileCheckResponse',
                '/phone/mobile/check'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\PhoneMobileCheckResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\PhoneMobileCheckResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkUrl
     *
     * Information about web resources
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $url The url to be checked (e.g. any website) (required)
     * @param string $max_redirects The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\UrlCheckResponse
     */
    public function checkUrl($license, $guid, $url, $max_redirects = null)
    {
        list($response) = $this->checkUrlWithHttpInfo($license, $guid, $url, $max_redirects);
        return $response;
    }

    /**
     * Operation checkUrlWithHttpInfo
     *
     * Information about web resources
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $url The url to be checked (e.g. any website) (required)
     * @param string $max_redirects The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\UrlCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkUrlWithHttpInfo($license, $guid, $url, $max_redirects = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling checkUrl');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkUrl, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkUrl, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling checkUrl');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.checkUrl, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'url' is set
        if ($url === null) {
            throw new \InvalidArgumentException('Missing the required parameter $url when calling checkUrl');
        }
        if ((strlen($url) > 2048)) {
            throw new \InvalidArgumentException('invalid length for "$url" when calling DataMillApi.checkUrl, must be smaller than or equal to 2048.');
        }
        if ((strlen($url) < 4)) {
            throw new \InvalidArgumentException('invalid length for "$url" when calling DataMillApi.checkUrl, must be bigger than or equal to 4.');
        }

        if (!is_null($max_redirects) && (strlen($max_redirects) > 100)) {
            throw new \InvalidArgumentException('invalid length for "$max_redirects" when calling DataMillApi.checkUrl, must be smaller than or equal to 100.');
        }
        if (!is_null($max_redirects) && (strlen($max_redirects) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$max_redirects" when calling DataMillApi.checkUrl, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/url/check";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = $this->apiClient->getSerializer()->toFormValue($url);
        }
        // form params
        if ($max_redirects !== null) {
            $formParams['max_redirects'] = $this->apiClient->getSerializer()->toFormValue($max_redirects);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\UrlCheckResponse',
                '/url/check'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\UrlCheckResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\UrlCheckResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation checkVAT
     *
     * Check vat number for correctness
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $vatnumber The VAT number of a company within the European Union (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\VatCheckResponse
     */
    public function checkVAT($license, $guid, $vatnumber)
    {
        list($response) = $this->checkVATWithHttpInfo($license, $guid, $vatnumber);
        return $response;
    }

    /**
     * Operation checkVATWithHttpInfo
     *
     * Check vat number for correctness
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $vatnumber The VAT number of a company within the European Union (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\VatCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkVATWithHttpInfo($license, $guid, $vatnumber)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling checkVAT');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkVAT, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.checkVAT, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling checkVAT');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.checkVAT, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'vatnumber' is set
        if ($vatnumber === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vatnumber when calling checkVAT');
        }
        if ((strlen($vatnumber) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$vatnumber" when calling DataMillApi.checkVAT, must be smaller than or equal to 255.');
        }
        if ((strlen($vatnumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$vatnumber" when calling DataMillApi.checkVAT, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/vat/check";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($vatnumber !== null) {
            $formParams['vatnumber'] = $this->apiClient->getSerializer()->toFormValue($vatnumber);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\VatCheckResponse',
                '/vat/check'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\VatCheckResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\VatCheckResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertCapitalFirst
     *
     * Convert any string to capitalize words
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $text Free-form text to be converted. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\ConvertCapitalFirstResponse
     */
    public function convertCapitalFirst($license, $guid, $text)
    {
        list($response) = $this->convertCapitalFirstWithHttpInfo($license, $guid, $text);
        return $response;
    }

    /**
     * Operation convertCapitalFirstWithHttpInfo
     *
     * Convert any string to capitalize words
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $text Free-form text to be converted. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\ConvertCapitalFirstResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertCapitalFirstWithHttpInfo($license, $guid, $text)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling convertCapitalFirst');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.convertCapitalFirst, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.convertCapitalFirst, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling convertCapitalFirst');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.convertCapitalFirst, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'text' is set
        if ($text === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text when calling convertCapitalFirst');
        }
        if ((strlen($text) > 2048)) {
            throw new \InvalidArgumentException('invalid length for "$text" when calling DataMillApi.convertCapitalFirst, must be smaller than or equal to 2048.');
        }
        if ((strlen($text) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$text" when calling DataMillApi.convertCapitalFirst, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/convert/capitalfirst";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = $this->apiClient->getSerializer()->toFormValue($text);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\ConvertCapitalFirstResponse',
                '/convert/capitalfirst'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\ConvertCapitalFirstResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ConvertCapitalFirstResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertLowerCase
     *
     * Convert any string to lower case
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $text Free-form text to be converted. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\ConvertLowerCaseResponse
     */
    public function convertLowerCase($license, $guid, $text)
    {
        list($response) = $this->convertLowerCaseWithHttpInfo($license, $guid, $text);
        return $response;
    }

    /**
     * Operation convertLowerCaseWithHttpInfo
     *
     * Convert any string to lower case
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $text Free-form text to be converted. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\ConvertLowerCaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertLowerCaseWithHttpInfo($license, $guid, $text)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling convertLowerCase');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.convertLowerCase, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.convertLowerCase, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling convertLowerCase');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.convertLowerCase, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'text' is set
        if ($text === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text when calling convertLowerCase');
        }
        if ((strlen($text) > 2048)) {
            throw new \InvalidArgumentException('invalid length for "$text" when calling DataMillApi.convertLowerCase, must be smaller than or equal to 2048.');
        }
        if ((strlen($text) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$text" when calling DataMillApi.convertLowerCase, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/convert/lowercase";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = $this->apiClient->getSerializer()->toFormValue($text);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\ConvertLowerCaseResponse',
                '/convert/lowercase'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\ConvertLowerCaseResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ConvertLowerCaseResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertUpperCase
     *
     * Convert any string to upper case
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $text Free-form text to be converted. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\ConvertUpperCaseResponse
     */
    public function convertUpperCase($license, $guid, $text)
    {
        list($response) = $this->convertUpperCaseWithHttpInfo($license, $guid, $text);
        return $response;
    }

    /**
     * Operation convertUpperCaseWithHttpInfo
     *
     * Convert any string to upper case
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $text Free-form text to be converted. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\ConvertUpperCaseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertUpperCaseWithHttpInfo($license, $guid, $text)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling convertUpperCase');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.convertUpperCase, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.convertUpperCase, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling convertUpperCase');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.convertUpperCase, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'text' is set
        if ($text === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text when calling convertUpperCase');
        }
        if ((strlen($text) > 2048)) {
            throw new \InvalidArgumentException('invalid length for "$text" when calling DataMillApi.convertUpperCase, must be smaller than or equal to 2048.');
        }
        if ((strlen($text) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$text" when calling DataMillApi.convertUpperCase, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/convert/uppercase";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = $this->apiClient->getSerializer()->toFormValue($text);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\ConvertUpperCaseResponse',
                '/convert/uppercase'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\ConvertUpperCaseResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ConvertUpperCaseResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertWrap
     *
     * Wrap text
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $text Fre-form text to be wrapped. (required)
     * @param int $limit The number of characters a linefeed will be inserted after (maximum character length per line). (required)
     * @param string $mode The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit. (optional)
     * @param string $linebreak Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;* (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\ConvertWrapResponse
     */
    public function convertWrap($license, $guid, $text, $limit, $mode = null, $linebreak = null)
    {
        list($response) = $this->convertWrapWithHttpInfo($license, $guid, $text, $limit, $mode, $linebreak);
        return $response;
    }

    /**
     * Operation convertWrapWithHttpInfo
     *
     * Wrap text
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $text Fre-form text to be wrapped. (required)
     * @param int $limit The number of characters a linefeed will be inserted after (maximum character length per line). (required)
     * @param string $mode The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit. (optional)
     * @param string $linebreak Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;* (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\ConvertWrapResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertWrapWithHttpInfo($license, $guid, $text, $limit, $mode = null, $linebreak = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling convertWrap');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.convertWrap, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.convertWrap, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling convertWrap');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.convertWrap, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'text' is set
        if ($text === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text when calling convertWrap');
        }
        if ((strlen($text) > 102400)) {
            throw new \InvalidArgumentException('invalid length for "$text" when calling DataMillApi.convertWrap, must be smaller than or equal to 102400.');
        }
        if ((strlen($text) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$text" when calling DataMillApi.convertWrap, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'limit' is set
        if ($limit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $limit when calling convertWrap');
        }
        if ((strlen($limit) > 102400)) {
            throw new \InvalidArgumentException('invalid length for "$limit" when calling DataMillApi.convertWrap, must be smaller than or equal to 102400.');
        }
        if ((strlen($limit) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$limit" when calling DataMillApi.convertWrap, must be bigger than or equal to 1.');
        }

        if (!is_null($mode) && (strlen($mode) > 6)) {
            throw new \InvalidArgumentException('invalid length for "$mode" when calling DataMillApi.convertWrap, must be smaller than or equal to 6.');
        }
        if (!is_null($mode) && (strlen($mode) < 5)) {
            throw new \InvalidArgumentException('invalid length for "$mode" when calling DataMillApi.convertWrap, must be bigger than or equal to 5.');
        }

        if (!is_null($linebreak) && (strlen($linebreak) > 6)) {
            throw new \InvalidArgumentException('invalid length for "$linebreak" when calling DataMillApi.convertWrap, must be smaller than or equal to 6.');
        }
        if (!is_null($linebreak) && (strlen($linebreak) < 4)) {
            throw new \InvalidArgumentException('invalid length for "$linebreak" when calling DataMillApi.convertWrap, must be bigger than or equal to 4.');
        }

        // parse inputs
        $resourcePath = "/convert/wrap";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = $this->apiClient->getSerializer()->toFormValue($text);
        }
        // form params
        if ($limit !== null) {
            $formParams['limit'] = $this->apiClient->getSerializer()->toFormValue($limit);
        }
        // form params
        if ($mode !== null) {
            $formParams['mode'] = $this->apiClient->getSerializer()->toFormValue($mode);
        }
        // form params
        if ($linebreak !== null) {
            $formParams['linebreak'] = $this->apiClient->getSerializer()->toFormValue($linebreak);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\ConvertWrapResponse',
                '/convert/wrap'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\ConvertWrapResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ConvertWrapResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation extractHouseNumber
     *
     * Try to extract house number from street information
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $street Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)
     * @param string $housenumber Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\AddressHouseNumberExtractResponse
     */
    public function extractHouseNumber($license, $guid, $street = null, $housenumber = null)
    {
        list($response) = $this->extractHouseNumberWithHttpInfo($license, $guid, $street, $housenumber);
        return $response;
    }

    /**
     * Operation extractHouseNumberWithHttpInfo
     *
     * Try to extract house number from street information
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $street Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)
     * @param string $housenumber Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\AddressHouseNumberExtractResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractHouseNumberWithHttpInfo($license, $guid, $street = null, $housenumber = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling extractHouseNumber');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.extractHouseNumber, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.extractHouseNumber, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling extractHouseNumber');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.extractHouseNumber, must be bigger than or equal to 30.');
        }

        if (!is_null($street) && (strlen($street) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DataMillApi.extractHouseNumber, must be smaller than or equal to 255.');
        }
        if (!is_null($street) && (strlen($street) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DataMillApi.extractHouseNumber, must be bigger than or equal to 0.');
        }

        if (!is_null($housenumber) && (strlen($housenumber) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$housenumber" when calling DataMillApi.extractHouseNumber, must be smaller than or equal to 255.');
        }
        if (!is_null($housenumber) && (strlen($housenumber) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$housenumber" when calling DataMillApi.extractHouseNumber, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/address/housenumber/extract";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($street !== null) {
            $formParams['street'] = $this->apiClient->getSerializer()->toFormValue($street);
        }
        // form params
        if ($housenumber !== null) {
            $formParams['housenumber'] = $this->apiClient->getSerializer()->toFormValue($housenumber);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\AddressHouseNumberExtractResponse',
                '/address/housenumber/extract'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\AddressHouseNumberExtractResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\AddressHouseNumberExtractResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation formatPhoneNumber
     *
     * Parse, format and validate phone numbers
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $phonenumber Phone number to be formatted and validated (required)
     * @param string $countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @param string $format The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format) (optional)
     * @param string $direct_dialing_delimiter Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)
     * @param string $allowed_delimiters Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\PhoneFormatResponse
     */
    public function formatPhoneNumber($license, $guid, $phonenumber, $countrycode, $format = null, $direct_dialing_delimiter = null, $allowed_delimiters = null)
    {
        list($response) = $this->formatPhoneNumberWithHttpInfo($license, $guid, $phonenumber, $countrycode, $format, $direct_dialing_delimiter, $allowed_delimiters);
        return $response;
    }

    /**
     * Operation formatPhoneNumberWithHttpInfo
     *
     * Parse, format and validate phone numbers
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $phonenumber Phone number to be formatted and validated (required)
     * @param string $countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @param string $format The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format) (optional)
     * @param string $direct_dialing_delimiter Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)
     * @param string $allowed_delimiters Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\PhoneFormatResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function formatPhoneNumberWithHttpInfo($license, $guid, $phonenumber, $countrycode, $format = null, $direct_dialing_delimiter = null, $allowed_delimiters = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling formatPhoneNumber');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.formatPhoneNumber, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.formatPhoneNumber, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling formatPhoneNumber');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.formatPhoneNumber, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'phonenumber' is set
        if ($phonenumber === null) {
            throw new \InvalidArgumentException('Missing the required parameter $phonenumber when calling formatPhoneNumber');
        }
        if ((strlen($phonenumber) > 128)) {
            throw new \InvalidArgumentException('invalid length for "$phonenumber" when calling DataMillApi.formatPhoneNumber, must be smaller than or equal to 128.');
        }
        if ((strlen($phonenumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$phonenumber" when calling DataMillApi.formatPhoneNumber, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'countrycode' is set
        if ($countrycode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $countrycode when calling formatPhoneNumber');
        }
        if ((strlen($countrycode) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$countrycode" when calling DataMillApi.formatPhoneNumber, must be smaller than or equal to 2.');
        }
        if ((strlen($countrycode) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$countrycode" when calling DataMillApi.formatPhoneNumber, must be bigger than or equal to 2.');
        }

        if (!is_null($format) && (strlen($format) > 100)) {
            throw new \InvalidArgumentException('invalid length for "$format" when calling DataMillApi.formatPhoneNumber, must be smaller than or equal to 100.');
        }
        if (!is_null($format) && (strlen($format) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$format" when calling DataMillApi.formatPhoneNumber, must be bigger than or equal to 0.');
        }

        if (!is_null($direct_dialing_delimiter) && (strlen($direct_dialing_delimiter) > 10)) {
            throw new \InvalidArgumentException('invalid length for "$direct_dialing_delimiter" when calling DataMillApi.formatPhoneNumber, must be smaller than or equal to 10.');
        }
        if (!is_null($direct_dialing_delimiter) && (strlen($direct_dialing_delimiter) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$direct_dialing_delimiter" when calling DataMillApi.formatPhoneNumber, must be bigger than or equal to 1.');
        }

        if (!is_null($allowed_delimiters) && (strlen($allowed_delimiters) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$allowed_delimiters" when calling DataMillApi.formatPhoneNumber, must be smaller than or equal to 255.');
        }
        if (!is_null($allowed_delimiters) && (strlen($allowed_delimiters) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$allowed_delimiters" when calling DataMillApi.formatPhoneNumber, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/phone/format";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($phonenumber !== null) {
            $formParams['phonenumber'] = $this->apiClient->getSerializer()->toFormValue($phonenumber);
        }
        // form params
        if ($countrycode !== null) {
            $formParams['countrycode'] = $this->apiClient->getSerializer()->toFormValue($countrycode);
        }
        // form params
        if ($format !== null) {
            $formParams['format'] = $this->apiClient->getSerializer()->toFormValue($format);
        }
        // form params
        if ($direct_dialing_delimiter !== null) {
            $formParams['direct_dialing_delimiter'] = $this->apiClient->getSerializer()->toFormValue($direct_dialing_delimiter);
        }
        // form params
        if ($allowed_delimiters !== null) {
            $formParams['allowed_delimiters'] = $this->apiClient->getSerializer()->toFormValue($allowed_delimiters);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\PhoneFormatResponse',
                '/phone/format'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\PhoneFormatResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\PhoneFormatResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDUNSRating
     *
     * Get marketing information by DUNS number
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $duns_number The D-U-N-S number you are looking for detailed information (required)
     * @param string $reason_code Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\BusinessDataDunsRatingResponse
     */
    public function getDUNSRating($license, $guid, $duns_number, $reason_code)
    {
        list($response) = $this->getDUNSRatingWithHttpInfo($license, $guid, $duns_number, $reason_code);
        return $response;
    }

    /**
     * Operation getDUNSRatingWithHttpInfo
     *
     * Get marketing information by DUNS number
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $duns_number The D-U-N-S number you are looking for detailed information (required)
     * @param string $reason_code Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\BusinessDataDunsRatingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDUNSRatingWithHttpInfo($license, $guid, $duns_number, $reason_code)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling getDUNSRating');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getDUNSRating, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getDUNSRating, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling getDUNSRating');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.getDUNSRating, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'duns_number' is set
        if ($duns_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $duns_number when calling getDUNSRating');
        }
        if ((strlen($duns_number) > 9)) {
            throw new \InvalidArgumentException('invalid length for "$duns_number" when calling DataMillApi.getDUNSRating, must be smaller than or equal to 9.');
        }
        if ((strlen($duns_number) < 9)) {
            throw new \InvalidArgumentException('invalid length for "$duns_number" when calling DataMillApi.getDUNSRating, must be bigger than or equal to 9.');
        }

        // verify the required parameter 'reason_code' is set
        if ($reason_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reason_code when calling getDUNSRating');
        }
        if ((strlen($reason_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for "$reason_code" when calling DataMillApi.getDUNSRating, must be smaller than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/business-data/duns/rating";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($duns_number !== null) {
            $formParams['duns_number'] = $this->apiClient->getSerializer()->toFormValue($duns_number);
        }
        // form params
        if ($reason_code !== null) {
            $formParams['reason_code'] = $this->apiClient->getSerializer()->toFormValue($reason_code);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\BusinessDataDunsRatingResponse',
                '/business-data/duns/rating'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\BusinessDataDunsRatingResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\BusinessDataDunsRatingResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFirstNames
     *
     * Recognize and extract first names
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $name Full name to detect all first names and extract them (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\FirstNameGetResponse
     */
    public function getFirstNames($license, $guid, $name)
    {
        list($response) = $this->getFirstNamesWithHttpInfo($license, $guid, $name);
        return $response;
    }

    /**
     * Operation getFirstNamesWithHttpInfo
     *
     * Recognize and extract first names
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $name Full name to detect all first names and extract them (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\FirstNameGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFirstNamesWithHttpInfo($license, $guid, $name)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling getFirstNames');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getFirstNames, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getFirstNames, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling getFirstNames');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.getFirstNames, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getFirstNames');
        }
        if ((strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling DataMillApi.getFirstNames, must be smaller than or equal to 255.');
        }
        if ((strlen($name) < 3)) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling DataMillApi.getFirstNames, must be bigger than or equal to 3.');
        }

        // parse inputs
        $resourcePath = "/firstname/get";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\FirstNameGetResponse',
                '/firstname/get'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\FirstNameGetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\FirstNameGetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getGender
     *
     * Recognize gender by first name
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $firstname First name to recognize gender. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\GenderGetResponse
     */
    public function getGender($license, $guid, $firstname)
    {
        list($response) = $this->getGenderWithHttpInfo($license, $guid, $firstname);
        return $response;
    }

    /**
     * Operation getGenderWithHttpInfo
     *
     * Recognize gender by first name
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $firstname First name to recognize gender. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\GenderGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGenderWithHttpInfo($license, $guid, $firstname)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling getGender');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getGender, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getGender, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling getGender');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.getGender, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'firstname' is set
        if ($firstname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $firstname when calling getGender');
        }
        if ((strlen($firstname) > 128)) {
            throw new \InvalidArgumentException('invalid length for "$firstname" when calling DataMillApi.getGender, must be smaller than or equal to 128.');
        }
        if ((strlen($firstname) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$firstname" when calling DataMillApi.getGender, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/gender/get";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($firstname !== null) {
            $formParams['firstname'] = $this->apiClient->getSerializer()->toFormValue($firstname);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\GenderGetResponse',
                '/gender/get'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\GenderGetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\GenderGetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getGenderExtended
     *
     * Recognize gender by first name (advanced)
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $firstname First name to recognize gender. (required)
     * @param string $countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\GenderExtendedGetResponse
     */
    public function getGenderExtended($license, $guid, $firstname, $countrycode)
    {
        list($response) = $this->getGenderExtendedWithHttpInfo($license, $guid, $firstname, $countrycode);
        return $response;
    }

    /**
     * Operation getGenderExtendedWithHttpInfo
     *
     * Recognize gender by first name (advanced)
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $firstname First name to recognize gender. (required)
     * @param string $countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\GenderExtendedGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGenderExtendedWithHttpInfo($license, $guid, $firstname, $countrycode)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling getGenderExtended');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getGenderExtended, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getGenderExtended, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling getGenderExtended');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.getGenderExtended, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'firstname' is set
        if ($firstname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $firstname when calling getGenderExtended');
        }
        if ((strlen($firstname) > 128)) {
            throw new \InvalidArgumentException('invalid length for "$firstname" when calling DataMillApi.getGenderExtended, must be smaller than or equal to 128.');
        }
        if ((strlen($firstname) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$firstname" when calling DataMillApi.getGenderExtended, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'countrycode' is set
        if ($countrycode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $countrycode when calling getGenderExtended');
        }
        if ((strlen($countrycode) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$countrycode" when calling DataMillApi.getGenderExtended, must be smaller than or equal to 2.');
        }
        if ((strlen($countrycode) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$countrycode" when calling DataMillApi.getGenderExtended, must be bigger than or equal to 2.');
        }

        // parse inputs
        $resourcePath = "/gender/extended/get";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($firstname !== null) {
            $formParams['firstname'] = $this->apiClient->getSerializer()->toFormValue($firstname);
        }
        // form params
        if ($countrycode !== null) {
            $formParams['countrycode'] = $this->apiClient->getSerializer()->toFormValue($countrycode);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\GenderExtendedGetResponse',
                '/gender/extended/get'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\GenderExtendedGetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\GenderExtendedGetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPhoneCountryCode
     *
     * International and national dial prefix
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\PhoneCountryCodeGetResponse
     */
    public function getPhoneCountryCode($license, $guid, $countrycode)
    {
        list($response) = $this->getPhoneCountryCodeWithHttpInfo($license, $guid, $countrycode);
        return $response;
    }

    /**
     * Operation getPhoneCountryCodeWithHttpInfo
     *
     * International and national dial prefix
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $countrycode ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\PhoneCountryCodeGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPhoneCountryCodeWithHttpInfo($license, $guid, $countrycode)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling getPhoneCountryCode');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getPhoneCountryCode, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getPhoneCountryCode, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling getPhoneCountryCode');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.getPhoneCountryCode, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'countrycode' is set
        if ($countrycode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $countrycode when calling getPhoneCountryCode');
        }
        if ((strlen($countrycode) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$countrycode" when calling DataMillApi.getPhoneCountryCode, must be smaller than or equal to 2.');
        }
        if ((strlen($countrycode) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$countrycode" when calling DataMillApi.getPhoneCountryCode, must be bigger than or equal to 2.');
        }

        // parse inputs
        $resourcePath = "/phone/countrycode/get";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($countrycode !== null) {
            $formParams['countrycode'] = $this->apiClient->getSerializer()->toFormValue($countrycode);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\PhoneCountryCodeGetResponse',
                '/phone/countrycode/get'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\PhoneCountryCodeGetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\PhoneCountryCodeGetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSocialMediaActivities
     *
     * Retrieve social media data by email address
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $email The person&#39;s email address being checked on mentioned social media plattforms (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\SocialMediaActivitiesGetResponse
     */
    public function getSocialMediaActivities($license, $guid, $email)
    {
        list($response) = $this->getSocialMediaActivitiesWithHttpInfo($license, $guid, $email);
        return $response;
    }

    /**
     * Operation getSocialMediaActivitiesWithHttpInfo
     *
     * Retrieve social media data by email address
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $email The person&#39;s email address being checked on mentioned social media plattforms (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\SocialMediaActivitiesGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSocialMediaActivitiesWithHttpInfo($license, $guid, $email)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling getSocialMediaActivities');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getSocialMediaActivities, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.getSocialMediaActivities, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling getSocialMediaActivities');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.getSocialMediaActivities, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling getSocialMediaActivities');
        }
        if ((strlen($email) > 320)) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling DataMillApi.getSocialMediaActivities, must be smaller than or equal to 320.');
        }
        if ((strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$email" when calling DataMillApi.getSocialMediaActivities, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/social-media/activities/get";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\SocialMediaActivitiesGetResponse',
                '/social-media/activities/get'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\SocialMediaActivitiesGetResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\SocialMediaActivitiesGetResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation locateAddress
     *
     * Reverse address lookup
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $latitude Latitude of the address (use a dot as decimal point) (required)
     * @param string $longitude Longitude of the address (use a dot as decimal point) (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\AddressSearchResponse
     */
    public function locateAddress($license, $guid, $latitude, $longitude, $locale = null)
    {
        list($response) = $this->locateAddressWithHttpInfo($license, $guid, $latitude, $longitude, $locale);
        return $response;
    }

    /**
     * Operation locateAddressWithHttpInfo
     *
     * Reverse address lookup
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $latitude Latitude of the address (use a dot as decimal point) (required)
     * @param string $longitude Longitude of the address (use a dot as decimal point) (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\AddressSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function locateAddressWithHttpInfo($license, $guid, $latitude, $longitude, $locale = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling locateAddress');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.locateAddress, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.locateAddress, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling locateAddress');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.locateAddress, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'latitude' is set
        if ($latitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $latitude when calling locateAddress');
        }
        if ((strlen($latitude) > 15)) {
            throw new \InvalidArgumentException('invalid length for "$latitude" when calling DataMillApi.locateAddress, must be smaller than or equal to 15.');
        }
        if ((strlen($latitude) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$latitude" when calling DataMillApi.locateAddress, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'longitude' is set
        if ($longitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $longitude when calling locateAddress');
        }
        if ((strlen($longitude) > 15)) {
            throw new \InvalidArgumentException('invalid length for "$longitude" when calling DataMillApi.locateAddress, must be smaller than or equal to 15.');
        }
        if ((strlen($longitude) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$longitude" when calling DataMillApi.locateAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($locale) && (strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling DataMillApi.locateAddress, must be smaller than or equal to 5.');
        }
        if (!is_null($locale) && (strlen($locale) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling DataMillApi.locateAddress, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/address/locate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($latitude !== null) {
            $formParams['latitude'] = $this->apiClient->getSerializer()->toFormValue($latitude);
        }
        // form params
        if ($longitude !== null) {
            $formParams['longitude'] = $this->apiClient->getSerializer()->toFormValue($longitude);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = $this->apiClient->getSerializer()->toFormValue($locale);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\AddressSearchResponse',
                '/address/locate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\AddressSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\AddressSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resolveDUNS
     *
     * Resolve company information by DUNS number
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $duns_number The D-U-N-S number you are looking for detailed information (required)
     * @param string $reason_code Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\BusinessDataDunsResolveResponse
     */
    public function resolveDUNS($license, $guid, $duns_number, $reason_code)
    {
        list($response) = $this->resolveDUNSWithHttpInfo($license, $guid, $duns_number, $reason_code);
        return $response;
    }

    /**
     * Operation resolveDUNSWithHttpInfo
     *
     * Resolve company information by DUNS number
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $duns_number The D-U-N-S number you are looking for detailed information (required)
     * @param string $reason_code Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\BusinessDataDunsResolveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function resolveDUNSWithHttpInfo($license, $guid, $duns_number, $reason_code)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling resolveDUNS');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.resolveDUNS, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.resolveDUNS, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling resolveDUNS');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.resolveDUNS, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'duns_number' is set
        if ($duns_number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $duns_number when calling resolveDUNS');
        }
        if ((strlen($duns_number) > 9)) {
            throw new \InvalidArgumentException('invalid length for "$duns_number" when calling DataMillApi.resolveDUNS, must be smaller than or equal to 9.');
        }
        if ((strlen($duns_number) < 9)) {
            throw new \InvalidArgumentException('invalid length for "$duns_number" when calling DataMillApi.resolveDUNS, must be bigger than or equal to 9.');
        }

        // verify the required parameter 'reason_code' is set
        if ($reason_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reason_code when calling resolveDUNS');
        }
        if ((strlen($reason_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for "$reason_code" when calling DataMillApi.resolveDUNS, must be smaller than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/business-data/duns/resolve";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($duns_number !== null) {
            $formParams['duns_number'] = $this->apiClient->getSerializer()->toFormValue($duns_number);
        }
        // form params
        if ($reason_code !== null) {
            $formParams['reason_code'] = $this->apiClient->getSerializer()->toFormValue($reason_code);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\BusinessDataDunsResolveResponse',
                '/business-data/duns/resolve'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\BusinessDataDunsResolveResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\BusinessDataDunsResolveResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resolveVAT
     *
     * Try to resolve VAT number to company information
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $vatnumber The VAT number of a company within the European Union (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\VatResolveResponse
     */
    public function resolveVAT($license, $guid, $vatnumber, $locale = null)
    {
        list($response) = $this->resolveVATWithHttpInfo($license, $guid, $vatnumber, $locale);
        return $response;
    }

    /**
     * Operation resolveVATWithHttpInfo
     *
     * Try to resolve VAT number to company information
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $vatnumber The VAT number of a company within the European Union (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\VatResolveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function resolveVATWithHttpInfo($license, $guid, $vatnumber, $locale = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling resolveVAT');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.resolveVAT, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.resolveVAT, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling resolveVAT');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.resolveVAT, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'vatnumber' is set
        if ($vatnumber === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vatnumber when calling resolveVAT');
        }
        if ((strlen($vatnumber) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$vatnumber" when calling DataMillApi.resolveVAT, must be smaller than or equal to 255.');
        }
        if ((strlen($vatnumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$vatnumber" when calling DataMillApi.resolveVAT, must be bigger than or equal to 1.');
        }

        if (!is_null($locale) && (strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling DataMillApi.resolveVAT, must be smaller than or equal to 5.');
        }
        if (!is_null($locale) && (strlen($locale) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling DataMillApi.resolveVAT, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/vat/resolve";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($vatnumber !== null) {
            $formParams['vatnumber'] = $this->apiClient->getSerializer()->toFormValue($vatnumber);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = $this->apiClient->getSerializer()->toFormValue($locale);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\VatResolveResponse',
                '/vat/resolve'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\VatResolveResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\VatResolveResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchAddress
     *
     * Lookup physical postal address
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $address Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search. (optional)
     * @param string $country Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)
     * @param string $state First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)
     * @param string $county Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)
     * @param string $city The city name. (optional)
     * @param string $zip Postal code defined by the government of the country. (optional)
     * @param string $district Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)
     * @param string $street The street name. (optional)
     * @param string $housenumber The house number or building name. (optional)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\AddressSearchResponse
     */
    public function searchAddress($license, $guid, $address = null, $country = null, $state = null, $county = null, $city = null, $zip = null, $district = null, $street = null, $housenumber = null, $locale = null)
    {
        list($response) = $this->searchAddressWithHttpInfo($license, $guid, $address, $country, $state, $county, $city, $zip, $district, $street, $housenumber, $locale);
        return $response;
    }

    /**
     * Operation searchAddressWithHttpInfo
     *
     * Lookup physical postal address
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $address Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search. (optional)
     * @param string $country Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)
     * @param string $state First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)
     * @param string $county Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)
     * @param string $city The city name. (optional)
     * @param string $zip Postal code defined by the government of the country. (optional)
     * @param string $district Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)
     * @param string $street The street name. (optional)
     * @param string $housenumber The house number or building name. (optional)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\AddressSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAddressWithHttpInfo($license, $guid, $address = null, $country = null, $state = null, $county = null, $city = null, $zip = null, $district = null, $street = null, $housenumber = null, $locale = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling searchAddress');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchAddress, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchAddress, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling searchAddress');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.searchAddress, must be bigger than or equal to 30.');
        }

        if (!is_null($address) && (strlen($address) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$address" when calling DataMillApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($address) && (strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$address" when calling DataMillApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($country) && (strlen($country) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling DataMillApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($country) && (strlen($country) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling DataMillApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($state) && (strlen($state) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$state" when calling DataMillApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($state) && (strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$state" when calling DataMillApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($county) && (strlen($county) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$county" when calling DataMillApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($county) && (strlen($county) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$county" when calling DataMillApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($city) && (strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling DataMillApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($city) && (strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling DataMillApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($zip) && (strlen($zip) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling DataMillApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($zip) && (strlen($zip) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling DataMillApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($district) && (strlen($district) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$district" when calling DataMillApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($district) && (strlen($district) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$district" when calling DataMillApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($street) && (strlen($street) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DataMillApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($street) && (strlen($street) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DataMillApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($housenumber) && (strlen($housenumber) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$housenumber" when calling DataMillApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($housenumber) && (strlen($housenumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$housenumber" when calling DataMillApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($locale) && (strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling DataMillApi.searchAddress, must be smaller than or equal to 5.');
        }
        if (!is_null($locale) && (strlen($locale) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling DataMillApi.searchAddress, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/address/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        // form params
        if ($country !== null) {
            $formParams['country'] = $this->apiClient->getSerializer()->toFormValue($country);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = $this->apiClient->getSerializer()->toFormValue($state);
        }
        // form params
        if ($county !== null) {
            $formParams['county'] = $this->apiClient->getSerializer()->toFormValue($county);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($zip !== null) {
            $formParams['zip'] = $this->apiClient->getSerializer()->toFormValue($zip);
        }
        // form params
        if ($district !== null) {
            $formParams['district'] = $this->apiClient->getSerializer()->toFormValue($district);
        }
        // form params
        if ($street !== null) {
            $formParams['street'] = $this->apiClient->getSerializer()->toFormValue($street);
        }
        // form params
        if ($housenumber !== null) {
            $formParams['housenumber'] = $this->apiClient->getSerializer()->toFormValue($housenumber);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = $this->apiClient->getSerializer()->toFormValue($locale);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\AddressSearchResponse',
                '/address/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\AddressSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\AddressSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchAddressMultiple
     *
     * Address lookup with multiple possible results
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $address Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\AddressSearchMultipleResponse
     */
    public function searchAddressMultiple($license, $guid, $address, $locale = null)
    {
        list($response) = $this->searchAddressMultipleWithHttpInfo($license, $guid, $address, $locale);
        return $response;
    }

    /**
     * Operation searchAddressMultipleWithHttpInfo
     *
     * Address lookup with multiple possible results
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $address Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\AddressSearchMultipleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAddressMultipleWithHttpInfo($license, $guid, $address, $locale = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling searchAddressMultiple');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchAddressMultiple, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchAddressMultiple, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling searchAddressMultiple');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.searchAddressMultiple, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address when calling searchAddressMultiple');
        }
        if ((strlen($address) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$address" when calling DataMillApi.searchAddressMultiple, must be smaller than or equal to 255.');
        }
        if ((strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$address" when calling DataMillApi.searchAddressMultiple, must be bigger than or equal to 1.');
        }

        if (!is_null($locale) && (strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling DataMillApi.searchAddressMultiple, must be smaller than or equal to 5.');
        }
        if (!is_null($locale) && (strlen($locale) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling DataMillApi.searchAddressMultiple, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/address/search/multiple";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = $this->apiClient->getSerializer()->toFormValue($locale);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\AddressSearchMultipleResponse',
                '/address/search/multiple'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\AddressSearchMultipleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\AddressSearchMultipleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchDUNS
     *
     * Find DUNS number and company information by name
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $country_code ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @param string $company_name The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)
     * @param string $duns_number The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)
     * @param string $state Filter to get only companies which matches the specified state (required for United States) (optional)
     * @param string $city Filter to get only companies which matches the specified city (optional)
     * @param string $zip Filter to get only companies which matches the specified postal code (optional)
     * @param string $street Filter to get only companies which matches the specified street (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\BusinessDataDunsSearchResponse
     */
    public function searchDUNS($license, $guid, $country_code, $company_name = null, $duns_number = null, $state = null, $city = null, $zip = null, $street = null)
    {
        list($response) = $this->searchDUNSWithHttpInfo($license, $guid, $country_code, $company_name, $duns_number, $state, $city, $zip, $street);
        return $response;
    }

    /**
     * Operation searchDUNSWithHttpInfo
     *
     * Find DUNS number and company information by name
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $country_code ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @param string $company_name The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)
     * @param string $duns_number The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)
     * @param string $state Filter to get only companies which matches the specified state (required for United States) (optional)
     * @param string $city Filter to get only companies which matches the specified city (optional)
     * @param string $zip Filter to get only companies which matches the specified postal code (optional)
     * @param string $street Filter to get only companies which matches the specified street (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\BusinessDataDunsSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchDUNSWithHttpInfo($license, $guid, $country_code, $company_name = null, $duns_number = null, $state = null, $city = null, $zip = null, $street = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling searchDUNS');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchDUNS, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchDUNS, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling searchDUNS');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.searchDUNS, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling searchDUNS');
        }
        if ((strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling DataMillApi.searchDUNS, must be smaller than or equal to 2.');
        }
        if ((strlen($country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling DataMillApi.searchDUNS, must be bigger than or equal to 2.');
        }

        if (!is_null($company_name) && (strlen($company_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$company_name" when calling DataMillApi.searchDUNS, must be smaller than or equal to 255.');
        }
        if (!is_null($company_name) && (strlen($company_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$company_name" when calling DataMillApi.searchDUNS, must be bigger than or equal to 1.');
        }

        if (!is_null($duns_number) && (strlen($duns_number) > 9)) {
            throw new \InvalidArgumentException('invalid length for "$duns_number" when calling DataMillApi.searchDUNS, must be smaller than or equal to 9.');
        }
        if (!is_null($duns_number) && (strlen($duns_number) < 9)) {
            throw new \InvalidArgumentException('invalid length for "$duns_number" when calling DataMillApi.searchDUNS, must be bigger than or equal to 9.');
        }

        if (!is_null($state) && (strlen($state) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$state" when calling DataMillApi.searchDUNS, must be smaller than or equal to 255.');
        }
        if (!is_null($state) && (strlen($state) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$state" when calling DataMillApi.searchDUNS, must be bigger than or equal to 0.');
        }

        if (!is_null($city) && (strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling DataMillApi.searchDUNS, must be smaller than or equal to 255.');
        }
        if (!is_null($city) && (strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling DataMillApi.searchDUNS, must be bigger than or equal to 0.');
        }

        if (!is_null($zip) && (strlen($zip) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling DataMillApi.searchDUNS, must be smaller than or equal to 255.');
        }
        if (!is_null($zip) && (strlen($zip) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling DataMillApi.searchDUNS, must be bigger than or equal to 0.');
        }

        if (!is_null($street) && (strlen($street) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DataMillApi.searchDUNS, must be smaller than or equal to 255.');
        }
        if (!is_null($street) && (strlen($street) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DataMillApi.searchDUNS, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/business-data/duns/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($company_name !== null) {
            $formParams['company_name'] = $this->apiClient->getSerializer()->toFormValue($company_name);
        }
        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($duns_number !== null) {
            $formParams['duns_number'] = $this->apiClient->getSerializer()->toFormValue($duns_number);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = $this->apiClient->getSerializer()->toFormValue($state);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($zip !== null) {
            $formParams['zip'] = $this->apiClient->getSerializer()->toFormValue($zip);
        }
        // form params
        if ($street !== null) {
            $formParams['street'] = $this->apiClient->getSerializer()->toFormValue($street);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\BusinessDataDunsSearchResponse',
                '/business-data/duns/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\BusinessDataDunsSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\BusinessDataDunsSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchUndeliverableContact
     *
     * Find moved and deceased contacts
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $first_name The person&#39;s first name (required)
     * @param string $last_name The person&#39;s last name (required)
     * @param string $country_code ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @param string $zip Last known postal code the person lives in (required)
     * @param string $street Last known street name the person lives in (required)
     * @param string $reason Free-form text written in english why you submit the query. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\BusinessDataUndeliverableContactsResponse
     */
    public function searchUndeliverableContact($license, $guid, $first_name, $last_name, $country_code, $zip, $street, $reason)
    {
        list($response) = $this->searchUndeliverableContactWithHttpInfo($license, $guid, $first_name, $last_name, $country_code, $zip, $street, $reason);
        return $response;
    }

    /**
     * Operation searchUndeliverableContactWithHttpInfo
     *
     * Find moved and deceased contacts
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $first_name The person&#39;s first name (required)
     * @param string $last_name The person&#39;s last name (required)
     * @param string $country_code ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @param string $zip Last known postal code the person lives in (required)
     * @param string $street Last known street name the person lives in (required)
     * @param string $reason Free-form text written in english why you submit the query. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\BusinessDataUndeliverableContactsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUndeliverableContactWithHttpInfo($license, $guid, $first_name, $last_name, $country_code, $zip, $street, $reason)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling searchUndeliverableContact');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchUndeliverableContact, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchUndeliverableContact, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling searchUndeliverableContact');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.searchUndeliverableContact, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'first_name' is set
        if ($first_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_name when calling searchUndeliverableContact');
        }
        if ((strlen($first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling DataMillApi.searchUndeliverableContact, must be smaller than or equal to 30.');
        }
        if ((strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling DataMillApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'last_name' is set
        if ($last_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $last_name when calling searchUndeliverableContact');
        }
        if ((strlen($last_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for "$last_name" when calling DataMillApi.searchUndeliverableContact, must be smaller than or equal to 30.');
        }
        if ((strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$last_name" when calling DataMillApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling searchUndeliverableContact');
        }
        if ((strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling DataMillApi.searchUndeliverableContact, must be smaller than or equal to 2.');
        }
        if ((strlen($country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling DataMillApi.searchUndeliverableContact, must be bigger than or equal to 2.');
        }

        // verify the required parameter 'zip' is set
        if ($zip === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zip when calling searchUndeliverableContact');
        }
        if ((strlen($zip) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling DataMillApi.searchUndeliverableContact, must be smaller than or equal to 5.');
        }
        if ((strlen($zip) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling DataMillApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'street' is set
        if ($street === null) {
            throw new \InvalidArgumentException('Missing the required parameter $street when calling searchUndeliverableContact');
        }
        if ((strlen($street) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DataMillApi.searchUndeliverableContact, must be smaller than or equal to 40.');
        }
        if ((strlen($street) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DataMillApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'reason' is set
        if ($reason === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reason when calling searchUndeliverableContact');
        }
        if ((strlen($reason) > 100)) {
            throw new \InvalidArgumentException('invalid length for "$reason" when calling DataMillApi.searchUndeliverableContact, must be smaller than or equal to 100.');
        }
        if ((strlen($reason) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$reason" when calling DataMillApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/business-data/undeliverable-contacts/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['last_name'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($zip !== null) {
            $formParams['zip'] = $this->apiClient->getSerializer()->toFormValue($zip);
        }
        // form params
        if ($street !== null) {
            $formParams['street'] = $this->apiClient->getSerializer()->toFormValue($street);
        }
        // form params
        if ($reason !== null) {
            $formParams['reason'] = $this->apiClient->getSerializer()->toFormValue($reason);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\BusinessDataUndeliverableContactsResponse',
                '/business-data/undeliverable-contacts/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\BusinessDataUndeliverableContactsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\BusinessDataUndeliverableContactsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchVAT
     *
     * Find VAT number and company information by name
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $company The name of an company. You may enter the fully qualified name or only partial information. (required)
     * @param string $city The city where the company&#39;s headquarters is located. (optional)
     * @param string $country_code ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI** (optional)
     * @param string $limit The maximum amount of results returned if multiple companies are found. Default value is **10**. (optional, default to 10)
     * @param string $min_score Threshold to set the minimum score rate of results being returned. Default: **0.8** (optional, default to 0.8)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\VatSearchResponse
     */
    public function searchVAT($license, $guid, $company, $city = null, $country_code = null, $limit = null, $min_score = null)
    {
        list($response) = $this->searchVATWithHttpInfo($license, $guid, $company, $city, $country_code, $limit, $min_score);
        return $response;
    }

    /**
     * Operation searchVATWithHttpInfo
     *
     * Find VAT number and company information by name
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $company The name of an company. You may enter the fully qualified name or only partial information. (required)
     * @param string $city The city where the company&#39;s headquarters is located. (optional)
     * @param string $country_code ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI** (optional)
     * @param string $limit The maximum amount of results returned if multiple companies are found. Default value is **10**. (optional, default to 10)
     * @param string $min_score Threshold to set the minimum score rate of results being returned. Default: **0.8** (optional, default to 0.8)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\VatSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchVATWithHttpInfo($license, $guid, $company, $city = null, $country_code = null, $limit = null, $min_score = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling searchVAT');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchVAT, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling DataMillApi.searchVAT, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling searchVAT');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling DataMillApi.searchVAT, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'company' is set
        if ($company === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company when calling searchVAT');
        }
        if ((strlen($company) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$company" when calling DataMillApi.searchVAT, must be smaller than or equal to 255.');
        }
        if ((strlen($company) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$company" when calling DataMillApi.searchVAT, must be bigger than or equal to 1.');
        }

        if (!is_null($city) && (strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling DataMillApi.searchVAT, must be smaller than or equal to 255.');
        }
        if (!is_null($city) && (strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling DataMillApi.searchVAT, must be bigger than or equal to 1.');
        }

        if (!is_null($country_code) && (strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling DataMillApi.searchVAT, must be smaller than or equal to 2.');
        }
        if (!is_null($country_code) && (strlen($country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling DataMillApi.searchVAT, must be bigger than or equal to 2.');
        }

        if (!is_null($limit) && (strlen($limit) > 20)) {
            throw new \InvalidArgumentException('invalid length for "$limit" when calling DataMillApi.searchVAT, must be smaller than or equal to 20.');
        }
        if (!is_null($limit) && (strlen($limit) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$limit" when calling DataMillApi.searchVAT, must be bigger than or equal to 1.');
        }

        if (!is_null($min_score) && (strlen($min_score) > 10)) {
            throw new \InvalidArgumentException('invalid length for "$min_score" when calling DataMillApi.searchVAT, must be smaller than or equal to 10.');
        }
        if (!is_null($min_score) && (strlen($min_score) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$min_score" when calling DataMillApi.searchVAT, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/vat/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($company !== null) {
            $formParams['company'] = $this->apiClient->getSerializer()->toFormValue($company);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($limit !== null) {
            $formParams['limit'] = $this->apiClient->getSerializer()->toFormValue($limit);
        }
        // form params
        if ($min_score !== null) {
            $formParams['min_score'] = $this->apiClient->getSerializer()->toFormValue($min_score);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\VatSearchResponse',
                '/vat/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\VatSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\VatSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
