<?php
/**
 * AddressApi
 * PHP version 5
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataMill;

use \DataMill\ApiClient;
use \DataMill\ApiException;
use \DataMill\Configuration;
use \DataMill\ObjectSerializer;

/**
 * AddressApi Class Doc Comment
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddressApi
{
    /**
     * API Client
     *
     * @var \DataMill\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataMill\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataMill\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.methis.at');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataMill\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataMill\ApiClient $apiClient set the API client
     *
     * @return AddressApi
     */
    public function setApiClient(\DataMill\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation extractHouseNumber
     *
     * Try to extract house number from street information
     *
     * @param string $street Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)
     * @param string $housenumber Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\AddressHouseNumberExtractResponse
     */
    public function extractHouseNumber($street = null, $housenumber = null)
    {
        list($response) = $this->extractHouseNumberWithHttpInfo($street, $housenumber);
        return $response;
    }

    /**
     * Operation extractHouseNumberWithHttpInfo
     *
     * Try to extract house number from street information
     *
     * @param string $street Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)
     * @param string $housenumber Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\AddressHouseNumberExtractResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractHouseNumberWithHttpInfo($street = null, $housenumber = null)
    {
        if (!is_null($street) && (strlen($street) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling AddressApi.extractHouseNumber, must be smaller than or equal to 255.');
        }
        if (!is_null($street) && (strlen($street) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling AddressApi.extractHouseNumber, must be bigger than or equal to 0.');
        }

        if (!is_null($housenumber) && (strlen($housenumber) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$housenumber" when calling AddressApi.extractHouseNumber, must be smaller than or equal to 255.');
        }
        if (!is_null($housenumber) && (strlen($housenumber) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$housenumber" when calling AddressApi.extractHouseNumber, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/address/housenumber/extract";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($street !== null) {
            $formParams['street'] = $this->apiClient->getSerializer()->toFormValue($street);
        }
        // form params
        if ($housenumber !== null) {
            $formParams['housenumber'] = $this->apiClient->getSerializer()->toFormValue($housenumber);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\AddressHouseNumberExtractResponse',
                '/address/housenumber/extract'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\AddressHouseNumberExtractResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\AddressHouseNumberExtractResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation locateAddress
     *
     * Reverse address lookup
     *
     * @param string $latitude Latitude of the address (use a dot as decimal point) (required)
     * @param string $longitude Longitude of the address (use a dot as decimal point) (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\AddressSearchResponse
     */
    public function locateAddress($latitude, $longitude, $locale = null)
    {
        list($response) = $this->locateAddressWithHttpInfo($latitude, $longitude, $locale);
        return $response;
    }

    /**
     * Operation locateAddressWithHttpInfo
     *
     * Reverse address lookup
     *
     * @param string $latitude Latitude of the address (use a dot as decimal point) (required)
     * @param string $longitude Longitude of the address (use a dot as decimal point) (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\AddressSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function locateAddressWithHttpInfo($latitude, $longitude, $locale = null)
    {
        // verify the required parameter 'latitude' is set
        if ($latitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $latitude when calling locateAddress');
        }
        if ((strlen($latitude) > 15)) {
            throw new \InvalidArgumentException('invalid length for "$latitude" when calling AddressApi.locateAddress, must be smaller than or equal to 15.');
        }
        if ((strlen($latitude) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$latitude" when calling AddressApi.locateAddress, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'longitude' is set
        if ($longitude === null) {
            throw new \InvalidArgumentException('Missing the required parameter $longitude when calling locateAddress');
        }
        if ((strlen($longitude) > 15)) {
            throw new \InvalidArgumentException('invalid length for "$longitude" when calling AddressApi.locateAddress, must be smaller than or equal to 15.');
        }
        if ((strlen($longitude) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$longitude" when calling AddressApi.locateAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($locale) && (strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling AddressApi.locateAddress, must be smaller than or equal to 5.');
        }
        if (!is_null($locale) && (strlen($locale) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling AddressApi.locateAddress, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/address/locate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($latitude !== null) {
            $formParams['latitude'] = $this->apiClient->getSerializer()->toFormValue($latitude);
        }
        // form params
        if ($longitude !== null) {
            $formParams['longitude'] = $this->apiClient->getSerializer()->toFormValue($longitude);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = $this->apiClient->getSerializer()->toFormValue($locale);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\AddressSearchResponse',
                '/address/locate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\AddressSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\AddressSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchAddress
     *
     * Lookup physical postal address
     *
     * @param string $address Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search. (optional)
     * @param string $country Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)
     * @param string $state First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)
     * @param string $county Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)
     * @param string $city The city name. (optional)
     * @param string $zip Postal code defined by the government of the country. (optional)
     * @param string $district Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)
     * @param string $street The street name. (optional)
     * @param string $housenumber The house number or building name. (optional)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\AddressSearchResponse
     */
    public function searchAddress($address = null, $country = null, $state = null, $county = null, $city = null, $zip = null, $district = null, $street = null, $housenumber = null, $locale = null)
    {
        list($response) = $this->searchAddressWithHttpInfo($address, $country, $state, $county, $city, $zip, $district, $street, $housenumber, $locale);
        return $response;
    }

    /**
     * Operation searchAddressWithHttpInfo
     *
     * Lookup physical postal address
     *
     * @param string $address Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search. (optional)
     * @param string $country Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)
     * @param string $state First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)
     * @param string $county Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)
     * @param string $city The city name. (optional)
     * @param string $zip Postal code defined by the government of the country. (optional)
     * @param string $district Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)
     * @param string $street The street name. (optional)
     * @param string $housenumber The house number or building name. (optional)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\AddressSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAddressWithHttpInfo($address = null, $country = null, $state = null, $county = null, $city = null, $zip = null, $district = null, $street = null, $housenumber = null, $locale = null)
    {
        if (!is_null($address) && (strlen($address) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$address" when calling AddressApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($address) && (strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$address" when calling AddressApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($country) && (strlen($country) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling AddressApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($country) && (strlen($country) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling AddressApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($state) && (strlen($state) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$state" when calling AddressApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($state) && (strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$state" when calling AddressApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($county) && (strlen($county) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$county" when calling AddressApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($county) && (strlen($county) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$county" when calling AddressApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($city) && (strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling AddressApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($city) && (strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling AddressApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($zip) && (strlen($zip) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling AddressApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($zip) && (strlen($zip) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling AddressApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($district) && (strlen($district) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$district" when calling AddressApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($district) && (strlen($district) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$district" when calling AddressApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($street) && (strlen($street) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling AddressApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($street) && (strlen($street) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling AddressApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($housenumber) && (strlen($housenumber) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$housenumber" when calling AddressApi.searchAddress, must be smaller than or equal to 255.');
        }
        if (!is_null($housenumber) && (strlen($housenumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$housenumber" when calling AddressApi.searchAddress, must be bigger than or equal to 1.');
        }

        if (!is_null($locale) && (strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling AddressApi.searchAddress, must be smaller than or equal to 5.');
        }
        if (!is_null($locale) && (strlen($locale) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling AddressApi.searchAddress, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/address/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        // form params
        if ($country !== null) {
            $formParams['country'] = $this->apiClient->getSerializer()->toFormValue($country);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = $this->apiClient->getSerializer()->toFormValue($state);
        }
        // form params
        if ($county !== null) {
            $formParams['county'] = $this->apiClient->getSerializer()->toFormValue($county);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($zip !== null) {
            $formParams['zip'] = $this->apiClient->getSerializer()->toFormValue($zip);
        }
        // form params
        if ($district !== null) {
            $formParams['district'] = $this->apiClient->getSerializer()->toFormValue($district);
        }
        // form params
        if ($street !== null) {
            $formParams['street'] = $this->apiClient->getSerializer()->toFormValue($street);
        }
        // form params
        if ($housenumber !== null) {
            $formParams['housenumber'] = $this->apiClient->getSerializer()->toFormValue($housenumber);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = $this->apiClient->getSerializer()->toFormValue($locale);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\AddressSearchResponse',
                '/address/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\AddressSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\AddressSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchAddressMultiple
     *
     * Address lookup with multiple possible results
     *
     * @param string $address Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\AddressSearchMultipleResponse
     */
    public function searchAddressMultiple($address, $locale = null)
    {
        list($response) = $this->searchAddressMultipleWithHttpInfo($address, $locale);
        return $response;
    }

    /**
     * Operation searchAddressMultipleWithHttpInfo
     *
     * Address lookup with multiple possible results
     *
     * @param string $address Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\AddressSearchMultipleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchAddressMultipleWithHttpInfo($address, $locale = null)
    {
        // verify the required parameter 'address' is set
        if ($address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address when calling searchAddressMultiple');
        }
        if ((strlen($address) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$address" when calling AddressApi.searchAddressMultiple, must be smaller than or equal to 255.');
        }
        if ((strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$address" when calling AddressApi.searchAddressMultiple, must be bigger than or equal to 1.');
        }

        if (!is_null($locale) && (strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling AddressApi.searchAddressMultiple, must be smaller than or equal to 5.');
        }
        if (!is_null($locale) && (strlen($locale) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling AddressApi.searchAddressMultiple, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/address/search/multiple";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = $this->apiClient->getSerializer()->toFormValue($locale);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\AddressSearchMultipleResponse',
                '/address/search/multiple'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\AddressSearchMultipleResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\AddressSearchMultipleResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
