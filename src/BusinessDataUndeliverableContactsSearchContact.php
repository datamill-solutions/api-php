<?php
/**
 * BusinessDataUndeliverableContactsSearchContact
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ;

use \ArrayAccess;

/**
 * BusinessDataUndeliverableContactsSearchContact Class Doc Comment
 *
 * @category    Class */
 // @description Contact object within response of successful transformation request for /business-data/undeliverable-contacts/search Collection of multiple information about the person found (e.g. the new postal address if known) gender: The person&#39;s gender (M or F) title: The person&#39;s title title_of_nobility: The person&#39;s title of nobility country_code: The ISO 3166-1 alpha-2 code of the country the person lives in zip: The postal code of the city/region the person lives in city: The city the person lives in street: The street the person lives in street_addition: Additional information about the street house_number: The house number of the building the person lives in house_number_addition: Additional information about the house number date_of_birth: The person&#39;s date of birth (yyyy-mm-dd) if available and deceased timestamp: The timestamp (yyyy-mm-dd) when the database entry was created
/**
 * @package     DataMill
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BusinessDataUndeliverableContactsSearchContact implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BusinessDataUndeliverableContactsSearchContact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gender' => 'string',
        'title' => 'string',
        'titleOfNobility' => 'string',
        'street' => 'string',
        'streetAddition' => 'string',
        'houseNumber' => 'string',
        'houseNumberAddition' => 'string',
        'zip' => 'string',
        'city' => 'string',
        'countryCode' => 'string',
        'dateOfBirth' => '\DateTime',
        'timestamp' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'gender' => 'gender',
        'title' => 'title',
        'titleOfNobility' => 'title_of_nobility',
        'street' => 'street',
        'streetAddition' => 'street_addition',
        'houseNumber' => 'house_number',
        'houseNumberAddition' => 'house_number_addition',
        'zip' => 'zip',
        'city' => 'city',
        'countryCode' => 'country_code',
        'dateOfBirth' => 'date_of_birth',
        'timestamp' => 'timestamp'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'gender' => 'setGender',
        'title' => 'setTitle',
        'titleOfNobility' => 'setTitleOfNobility',
        'street' => 'setStreet',
        'streetAddition' => 'setStreetAddition',
        'houseNumber' => 'setHouseNumber',
        'houseNumberAddition' => 'setHouseNumberAddition',
        'zip' => 'setZip',
        'city' => 'setCity',
        'countryCode' => 'setCountryCode',
        'dateOfBirth' => 'setDateOfBirth',
        'timestamp' => 'setTimestamp'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'gender' => 'getGender',
        'title' => 'getTitle',
        'titleOfNobility' => 'getTitleOfNobility',
        'street' => 'getStreet',
        'streetAddition' => 'getStreetAddition',
        'houseNumber' => 'getHouseNumber',
        'houseNumberAddition' => 'getHouseNumberAddition',
        'zip' => 'getZip',
        'city' => 'getCity',
        'countryCode' => 'getCountryCode',
        'dateOfBirth' => 'getDateOfBirth',
        'timestamp' => 'getTimestamp'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['titleOfNobility'] = isset($data['titleOfNobility']) ? $data['titleOfNobility'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['streetAddition'] = isset($data['streetAddition']) ? $data['streetAddition'] : null;
        $this->container['houseNumber'] = isset($data['houseNumber']) ? $data['houseNumber'] : null;
        $this->container['houseNumberAddition'] = isset($data['houseNumberAddition']) ? $data['houseNumberAddition'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['dateOfBirth'] = isset($data['dateOfBirth']) ? $data['dateOfBirth'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets titleOfNobility
     * @return string
     */
    public function getTitleOfNobility()
    {
        return $this->container['titleOfNobility'];
    }

    /**
     * Sets titleOfNobility
     * @param string $titleOfNobility
     * @return $this
     */
    public function setTitleOfNobility($titleOfNobility)
    {
        $this->container['titleOfNobility'] = $titleOfNobility;

        return $this;
    }

    /**
     * Gets street
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     * @param string $street
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets streetAddition
     * @return string
     */
    public function getStreetAddition()
    {
        return $this->container['streetAddition'];
    }

    /**
     * Sets streetAddition
     * @param string $streetAddition
     * @return $this
     */
    public function setStreetAddition($streetAddition)
    {
        $this->container['streetAddition'] = $streetAddition;

        return $this;
    }

    /**
     * Gets houseNumber
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['houseNumber'];
    }

    /**
     * Sets houseNumber
     * @param string $houseNumber
     * @return $this
     */
    public function setHouseNumber($houseNumber)
    {
        $this->container['houseNumber'] = $houseNumber;

        return $this;
    }

    /**
     * Gets houseNumberAddition
     * @return string
     */
    public function getHouseNumberAddition()
    {
        return $this->container['houseNumberAddition'];
    }

    /**
     * Sets houseNumberAddition
     * @param string $houseNumberAddition
     * @return $this
     */
    public function setHouseNumberAddition($houseNumberAddition)
    {
        $this->container['houseNumberAddition'] = $houseNumberAddition;

        return $this;
    }

    /**
     * Gets zip
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     * @param string $zip
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets countryCode
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     * @param string $countryCode
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets dateOfBirth
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     * @param \DateTime $dateOfBirth
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets timestamp
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param \DateTime $timestamp
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataMill\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataMill\ObjectSerializer::sanitizeForSerialization($this));
    }
}
