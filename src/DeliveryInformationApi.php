<?php
/**
 * DeliveryInformationApi
 * PHP version 5
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataMill;

use \DataMill\ApiClient;
use \DataMill\ApiException;
use \DataMill\Configuration;
use \DataMill\ObjectSerializer;

/**
 * DeliveryInformationApi Class Doc Comment
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryInformationApi
{
    /**
     * API Client
     *
     * @var \DataMill\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataMill\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataMill\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.methis.at');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataMill\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataMill\ApiClient $apiClient set the API client
     *
     * @return DeliveryInformationApi
     */
    public function setApiClient(\DataMill\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation searchUndeliverableContact
     *
     * Find moved and deceased contacts
     *
     * @param string $first_name The person&#39;s first name (required)
     * @param string $last_name The person&#39;s last name (required)
     * @param string $country_code ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @param string $zip Last known postal code the person lives in (required)
     * @param string $street Last known street name the person lives in (required)
     * @param string $reason Free-form text written in english why you submit the query. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \DataMill\BusinessDataUndeliverableContactsResponse
     */
    public function searchUndeliverableContact($first_name, $last_name, $country_code, $zip, $street, $reason)
    {
        list($response) = $this->searchUndeliverableContactWithHttpInfo($first_name, $last_name, $country_code, $zip, $street, $reason);
        return $response;
    }

    /**
     * Operation searchUndeliverableContactWithHttpInfo
     *
     * Find moved and deceased contacts
     *
     * @param string $first_name The person&#39;s first name (required)
     * @param string $last_name The person&#39;s last name (required)
     * @param string $country_code ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information. (required)
     * @param string $zip Last known postal code the person lives in (required)
     * @param string $street Last known street name the person lives in (required)
     * @param string $reason Free-form text written in english why you submit the query. (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \DataMill\BusinessDataUndeliverableContactsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUndeliverableContactWithHttpInfo($first_name, $last_name, $country_code, $zip, $street, $reason)
    {
        // verify the required parameter 'first_name' is set
        if ($first_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_name when calling searchUndeliverableContact');
        }
        if ((strlen($first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling DeliveryInformationApi.searchUndeliverableContact, must be smaller than or equal to 30.');
        }
        if ((strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling DeliveryInformationApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'last_name' is set
        if ($last_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $last_name when calling searchUndeliverableContact');
        }
        if ((strlen($last_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for "$last_name" when calling DeliveryInformationApi.searchUndeliverableContact, must be smaller than or equal to 30.');
        }
        if ((strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$last_name" when calling DeliveryInformationApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling searchUndeliverableContact');
        }
        if ((strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling DeliveryInformationApi.searchUndeliverableContact, must be smaller than or equal to 2.');
        }
        if ((strlen($country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling DeliveryInformationApi.searchUndeliverableContact, must be bigger than or equal to 2.');
        }

        // verify the required parameter 'zip' is set
        if ($zip === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zip when calling searchUndeliverableContact');
        }
        if ((strlen($zip) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling DeliveryInformationApi.searchUndeliverableContact, must be smaller than or equal to 5.');
        }
        if ((strlen($zip) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$zip" when calling DeliveryInformationApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'street' is set
        if ($street === null) {
            throw new \InvalidArgumentException('Missing the required parameter $street when calling searchUndeliverableContact');
        }
        if ((strlen($street) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DeliveryInformationApi.searchUndeliverableContact, must be smaller than or equal to 40.');
        }
        if ((strlen($street) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$street" when calling DeliveryInformationApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'reason' is set
        if ($reason === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reason when calling searchUndeliverableContact');
        }
        if ((strlen($reason) > 100)) {
            throw new \InvalidArgumentException('invalid length for "$reason" when calling DeliveryInformationApi.searchUndeliverableContact, must be smaller than or equal to 100.');
        }
        if ((strlen($reason) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$reason" when calling DeliveryInformationApi.searchUndeliverableContact, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/business-data/undeliverable-contacts/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['last_name'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($zip !== null) {
            $formParams['zip'] = $this->apiClient->getSerializer()->toFormValue($zip);
        }
        // form params
        if ($street !== null) {
            $formParams['street'] = $this->apiClient->getSerializer()->toFormValue($street);
        }
        // form params
        if ($reason !== null) {
            $formParams['reason'] = $this->apiClient->getSerializer()->toFormValue($reason);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DataMill\BusinessDataUndeliverableContactsResponse',
                '/business-data/undeliverable-contacts/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DataMill\BusinessDataUndeliverableContactsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\BusinessDataUndeliverableContactsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DataMill\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
