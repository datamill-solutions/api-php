<?php
/**
 * SocialMediaActivitiesGetResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataMill;

use \ArrayAccess;

/**
 * SocialMediaActivitiesGetResponse Class Doc Comment
 *
 * @category    Class */
 // @description Response of successful transformation request for /social-media/activities/get
/**
 * @package     DataMill
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SocialMediaActivitiesGetResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SocialMediaActivitiesGetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'status' => 'int',
        'status_description' => 'string',
        'name' => 'string',
        'email' => 'string',
        'gender' => 'string',
        'avatar' => 'string',
        'bio' => 'string',
        'max_followers' => 'int',
        'sum_followers' => 'int',
        'location' => '\DataMill\SocialMediaActivitiesGetLocation',
        'education' => '\DataMill\SocialMediaActivitiesGetEducation[]',
        'employment' => '\DataMill\SocialMediaActivitiesGetEmployment[]',
        'linkedin' => '\DataMill\SocialMediaActivitiesGetLinkedIn',
        'xing' => '\DataMill\SocialMediaActivitiesGetXing',
        'facebook' => '\DataMill\SocialMediaActivitiesGetFacebook',
        'twitter' => '\DataMill\SocialMediaActivitiesGetTwitter',
        'pinterest' => '\DataMill\SocialMediaActivitiesGetPinterest',
        'instagram' => '\DataMill\SocialMediaActivitiesGetInstagram',
        'youtube' => '\DataMill\SocialMediaActivitiesGetYouTube',
        'googleplus' => '\DataMill\SocialMediaActivitiesGetGooglePlus',
        'klout' => '\DataMill\SocialMediaActivitiesGetKlout'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'status_description' => 'status_description',
        'name' => 'name',
        'email' => 'email',
        'gender' => 'gender',
        'avatar' => 'avatar',
        'bio' => 'bio',
        'max_followers' => 'max_followers',
        'sum_followers' => 'sum_followers',
        'location' => 'location',
        'education' => 'education',
        'employment' => 'employment',
        'linkedin' => 'linkedin',
        'xing' => 'xing',
        'facebook' => 'facebook',
        'twitter' => 'twitter',
        'pinterest' => 'pinterest',
        'instagram' => 'instagram',
        'youtube' => 'youtube',
        'googleplus' => 'googleplus',
        'klout' => 'klout'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'status_description' => 'setStatusDescription',
        'name' => 'setName',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'avatar' => 'setAvatar',
        'bio' => 'setBio',
        'max_followers' => 'setMaxFollowers',
        'sum_followers' => 'setSumFollowers',
        'location' => 'setLocation',
        'education' => 'setEducation',
        'employment' => 'setEmployment',
        'linkedin' => 'setLinkedin',
        'xing' => 'setXing',
        'facebook' => 'setFacebook',
        'twitter' => 'setTwitter',
        'pinterest' => 'setPinterest',
        'instagram' => 'setInstagram',
        'youtube' => 'setYoutube',
        'googleplus' => 'setGoogleplus',
        'klout' => 'setKlout'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'status_description' => 'getStatusDescription',
        'name' => 'getName',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'avatar' => 'getAvatar',
        'bio' => 'getBio',
        'max_followers' => 'getMaxFollowers',
        'sum_followers' => 'getSumFollowers',
        'location' => 'getLocation',
        'education' => 'getEducation',
        'employment' => 'getEmployment',
        'linkedin' => 'getLinkedin',
        'xing' => 'getXing',
        'facebook' => 'getFacebook',
        'twitter' => 'getTwitter',
        'pinterest' => 'getPinterest',
        'instagram' => 'getInstagram',
        'youtube' => 'getYoutube',
        'googleplus' => 'getGoogleplus',
        'klout' => 'getKlout'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_1 = 1;
    const STATUS_MINUS_1 = -1;
    const STATUS_MINUS_2 = -2;
    const STATUS_MINUS_3 = -3;
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_1,
            self::STATUS_MINUS_1,
            self::STATUS_MINUS_2,
            self::STATUS_MINUS_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_description'] = isset($data['status_description']) ? $data['status_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['bio'] = isset($data['bio']) ? $data['bio'] : null;
        $this->container['max_followers'] = isset($data['max_followers']) ? $data['max_followers'] : null;
        $this->container['sum_followers'] = isset($data['sum_followers']) ? $data['sum_followers'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['education'] = isset($data['education']) ? $data['education'] : null;
        $this->container['employment'] = isset($data['employment']) ? $data['employment'] : null;
        $this->container['linkedin'] = isset($data['linkedin']) ? $data['linkedin'] : null;
        $this->container['xing'] = isset($data['xing']) ? $data['xing'] : null;
        $this->container['facebook'] = isset($data['facebook']) ? $data['facebook'] : null;
        $this->container['twitter'] = isset($data['twitter']) ? $data['twitter'] : null;
        $this->container['pinterest'] = isset($data['pinterest']) ? $data['pinterest'] : null;
        $this->container['instagram'] = isset($data['instagram']) ? $data['instagram'] : null;
        $this->container['youtube'] = isset($data['youtube']) ? $data['youtube'] : null;
        $this->container['googleplus'] = isset($data['googleplus']) ? $data['googleplus'] : null;
        $this->container['klout'] = isset($data['klout']) ? $data['klout'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = ["1", "-1", "-2", "-3"];
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of '1', '-1', '-2', '-3'.";
        }

        if ($this->container['status_description'] === null) {
            $invalid_properties[] = "'status_description' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = ["1", "-1", "-2", "-3"];
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        if ($this->container['status_description'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status Unique status code describing the response  * **1**: Social media activities found and present in the response,  * **-1**: No social media activities found for the requested email address (in this case all following response keys except the status_description are not present),  * **-2**: Your request is queued and a response will be available within the next 12 hours (in this case all following response keys except the status_description are not present),  * **-3**: Your requested email address is invalid (please check that the email is url encoded).
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('1', '-1', '-2', '-3');
        if ((!in_array($status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of '1', '-1', '-2', '-3'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_description
     * @return string
     */
    public function getStatusDescription()
    {
        return $this->container['status_description'];
    }

    /**
     * Sets status_description
     * @param string $status_description Short description of the status code
     * @return $this
     */
    public function setStatusDescription($status_description)
    {
        $this->container['status_description'] = $status_description;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name First name and last name of the person
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email The requested email address
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender The person's gender written in english and all lowercase. Either **female** or **male**
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets avatar
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     * @param string $avatar Profile image (fully qualified url) of the social media profile with the most followers
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets bio
     * @return string
     */
    public function getBio()
    {
        return $this->container['bio'];
    }

    /**
     * Sets bio
     * @param string $bio Biography of the social media profile where the person has the most followers (unless it doesn't show a biography, then the social media profile with the second most followers is checked)
     * @return $this
     */
    public function setBio($bio)
    {
        $this->container['bio'] = $bio;

        return $this;
    }

    /**
     * Gets max_followers
     * @return int
     */
    public function getMaxFollowers()
    {
        return $this->container['max_followers'];
    }

    /**
     * Sets max_followers
     * @param int $max_followers The maximum number of followers found by any of the social media platforms
     * @return $this
     */
    public function setMaxFollowers($max_followers)
    {
        $this->container['max_followers'] = $max_followers;

        return $this;
    }

    /**
     * Gets sum_followers
     * @return int
     */
    public function getSumFollowers()
    {
        return $this->container['sum_followers'];
    }

    /**
     * Sets sum_followers
     * @param int $sum_followers The total number of followers of all social media platforms
     * @return $this
     */
    public function setSumFollowers($sum_followers)
    {
        $this->container['sum_followers'] = $sum_followers;

        return $this;
    }

    /**
     * Gets location
     * @return \DataMill\SocialMediaActivitiesGetLocation
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     * @param \DataMill\SocialMediaActivitiesGetLocation $location
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets education
     * @return \DataMill\SocialMediaActivitiesGetEducation[]
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     * @param \DataMill\SocialMediaActivitiesGetEducation[] $education Collection of all educations found.
     * @return $this
     */
    public function setEducation($education)
    {
        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets employment
     * @return \DataMill\SocialMediaActivitiesGetEmployment[]
     */
    public function getEmployment()
    {
        return $this->container['employment'];
    }

    /**
     * Sets employment
     * @param \DataMill\SocialMediaActivitiesGetEmployment[] $employment Collection of all companies the person worked for.
     * @return $this
     */
    public function setEmployment($employment)
    {
        $this->container['employment'] = $employment;

        return $this;
    }

    /**
     * Gets linkedin
     * @return \DataMill\SocialMediaActivitiesGetLinkedIn
     */
    public function getLinkedin()
    {
        return $this->container['linkedin'];
    }

    /**
     * Sets linkedin
     * @param \DataMill\SocialMediaActivitiesGetLinkedIn $linkedin
     * @return $this
     */
    public function setLinkedin($linkedin)
    {
        $this->container['linkedin'] = $linkedin;

        return $this;
    }

    /**
     * Gets xing
     * @return \DataMill\SocialMediaActivitiesGetXing
     */
    public function getXing()
    {
        return $this->container['xing'];
    }

    /**
     * Sets xing
     * @param \DataMill\SocialMediaActivitiesGetXing $xing
     * @return $this
     */
    public function setXing($xing)
    {
        $this->container['xing'] = $xing;

        return $this;
    }

    /**
     * Gets facebook
     * @return \DataMill\SocialMediaActivitiesGetFacebook
     */
    public function getFacebook()
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     * @param \DataMill\SocialMediaActivitiesGetFacebook $facebook
     * @return $this
     */
    public function setFacebook($facebook)
    {
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets twitter
     * @return \DataMill\SocialMediaActivitiesGetTwitter
     */
    public function getTwitter()
    {
        return $this->container['twitter'];
    }

    /**
     * Sets twitter
     * @param \DataMill\SocialMediaActivitiesGetTwitter $twitter
     * @return $this
     */
    public function setTwitter($twitter)
    {
        $this->container['twitter'] = $twitter;

        return $this;
    }

    /**
     * Gets pinterest
     * @return \DataMill\SocialMediaActivitiesGetPinterest
     */
    public function getPinterest()
    {
        return $this->container['pinterest'];
    }

    /**
     * Sets pinterest
     * @param \DataMill\SocialMediaActivitiesGetPinterest $pinterest
     * @return $this
     */
    public function setPinterest($pinterest)
    {
        $this->container['pinterest'] = $pinterest;

        return $this;
    }

    /**
     * Gets instagram
     * @return \DataMill\SocialMediaActivitiesGetInstagram
     */
    public function getInstagram()
    {
        return $this->container['instagram'];
    }

    /**
     * Sets instagram
     * @param \DataMill\SocialMediaActivitiesGetInstagram $instagram
     * @return $this
     */
    public function setInstagram($instagram)
    {
        $this->container['instagram'] = $instagram;

        return $this;
    }

    /**
     * Gets youtube
     * @return \DataMill\SocialMediaActivitiesGetYouTube
     */
    public function getYoutube()
    {
        return $this->container['youtube'];
    }

    /**
     * Sets youtube
     * @param \DataMill\SocialMediaActivitiesGetYouTube $youtube
     * @return $this
     */
    public function setYoutube($youtube)
    {
        $this->container['youtube'] = $youtube;

        return $this;
    }

    /**
     * Gets googleplus
     * @return \DataMill\SocialMediaActivitiesGetGooglePlus
     */
    public function getGoogleplus()
    {
        return $this->container['googleplus'];
    }

    /**
     * Sets googleplus
     * @param \DataMill\SocialMediaActivitiesGetGooglePlus $googleplus
     * @return $this
     */
    public function setGoogleplus($googleplus)
    {
        $this->container['googleplus'] = $googleplus;

        return $this;
    }

    /**
     * Gets klout
     * @return \DataMill\SocialMediaActivitiesGetKlout
     */
    public function getKlout()
    {
        return $this->container['klout'];
    }

    /**
     * Sets klout
     * @param \DataMill\SocialMediaActivitiesGetKlout $klout
     * @return $this
     */
    public function setKlout($klout)
    {
        $this->container['klout'] = $klout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DataMill\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DataMill\ObjectSerializer::sanitizeForSerialization($this));
    }
}
