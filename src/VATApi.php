<?php
/**
 * VATApi
 * PHP version 5
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DataMill;

use \DataMill\ApiClient;
use \DataMill\ApiException;
use \DataMill\Configuration;
use \DataMill\ObjectSerializer;

/**
 * VATApi Class Doc Comment
 *
 * @category Class
 * @package  DataMill
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VATApi
{
    /**
     * API Client
     *
     * @var \DataMill\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \DataMill\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\DataMill\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.methis.at');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \DataMill\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \DataMill\ApiClient $apiClient set the API client
     *
     * @return VATApi
     */
    public function setApiClient(\DataMill\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation checkVAT
     *
     * Check vat number for correctness
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $vatnumber The VAT number of a company within the European Union (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \\VatCheckResponse
     */
    public function checkVAT($license, $guid, $vatnumber)
    {
        list($response) = $this->checkVATWithHttpInfo($license, $guid, $vatnumber);
        return $response;
    }

    /**
     * Operation checkVATWithHttpInfo
     *
     * Check vat number for correctness
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $vatnumber The VAT number of a company within the European Union (required)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \\VatCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkVATWithHttpInfo($license, $guid, $vatnumber)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling checkVAT');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling VATApi.checkVAT, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling VATApi.checkVAT, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling checkVAT');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling VATApi.checkVAT, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'vatnumber' is set
        if ($vatnumber === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vatnumber when calling checkVAT');
        }
        if ((strlen($vatnumber) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$vatnumber" when calling VATApi.checkVAT, must be smaller than or equal to 255.');
        }
        if ((strlen($vatnumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$vatnumber" when calling VATApi.checkVAT, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/vat/check";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($vatnumber !== null) {
            $formParams['vatnumber'] = $this->apiClient->getSerializer()->toFormValue($vatnumber);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\\VatCheckResponse',
                '/vat/check'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\\VatCheckResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\VatCheckResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resolveVAT
     *
     * Try to resolve VAT number to company information
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $vatnumber The VAT number of a company within the European Union (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \\VatResolveResponse
     */
    public function resolveVAT($license, $guid, $vatnumber, $locale = null)
    {
        list($response) = $this->resolveVATWithHttpInfo($license, $guid, $vatnumber, $locale);
        return $response;
    }

    /**
     * Operation resolveVATWithHttpInfo
     *
     * Try to resolve VAT number to company information
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $vatnumber The VAT number of a company within the European Union (required)
     * @param string $locale The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \\VatResolveResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function resolveVATWithHttpInfo($license, $guid, $vatnumber, $locale = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling resolveVAT');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling VATApi.resolveVAT, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling VATApi.resolveVAT, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling resolveVAT');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling VATApi.resolveVAT, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'vatnumber' is set
        if ($vatnumber === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vatnumber when calling resolveVAT');
        }
        if ((strlen($vatnumber) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$vatnumber" when calling VATApi.resolveVAT, must be smaller than or equal to 255.');
        }
        if ((strlen($vatnumber) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$vatnumber" when calling VATApi.resolveVAT, must be bigger than or equal to 1.');
        }

        if (!is_null($locale) && (strlen($locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling VATApi.resolveVAT, must be smaller than or equal to 5.');
        }
        if (!is_null($locale) && (strlen($locale) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$locale" when calling VATApi.resolveVAT, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/vat/resolve";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($vatnumber !== null) {
            $formParams['vatnumber'] = $this->apiClient->getSerializer()->toFormValue($vatnumber);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = $this->apiClient->getSerializer()->toFormValue($locale);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\\VatResolveResponse',
                '/vat/resolve'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\\VatResolveResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\VatResolveResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchVAT
     *
     * Find VAT number and company information by name
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $company The name of an company. You may enter the fully qualified name or only partial information. (required)
     * @param string $city The city where the company&#39;s headquarters is located. (optional)
     * @param string $countryCode ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI** (optional)
     * @param string $limit The maximum amount of results returned if multiple companies are found. Default value is **10**. (optional, default to 10)
     * @param string $minScore Threshold to set the minimum score rate of results being returned. Default: **0.8** (optional, default to 0.8)
     * @throws \DataMill\ApiException on non-2xx response
     * @return \\VatSearchResponse
     */
    public function searchVAT($license, $guid, $company, $city = null, $countryCode = null, $limit = null, $minScore = null)
    {
        list($response) = $this->searchVATWithHttpInfo($license, $guid, $company, $city, $countryCode, $limit, $minScore);
        return $response;
    }

    /**
     * Operation searchVATWithHttpInfo
     *
     * Find VAT number and company information by name
     *
     * @param string $license The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $guid The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. (required)
     * @param string $company The name of an company. You may enter the fully qualified name or only partial information. (required)
     * @param string $city The city where the company&#39;s headquarters is located. (optional)
     * @param string $countryCode ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI** (optional)
     * @param string $limit The maximum amount of results returned if multiple companies are found. Default value is **10**. (optional, default to 10)
     * @param string $minScore Threshold to set the minimum score rate of results being returned. Default: **0.8** (optional, default to 0.8)
     * @throws \DataMill\ApiException on non-2xx response
     * @return array of \\VatSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchVATWithHttpInfo($license, $guid, $company, $city = null, $countryCode = null, $limit = null, $minScore = null)
    {
        // verify the required parameter 'license' is set
        if ($license === null) {
            throw new \InvalidArgumentException('Missing the required parameter $license when calling searchVAT');
        }
        if ((strlen($license) > 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling VATApi.searchVAT, must be smaller than or equal to 29.');
        }
        if ((strlen($license) < 29)) {
            throw new \InvalidArgumentException('invalid length for "$license" when calling VATApi.searchVAT, must be bigger than or equal to 29.');
        }

        // verify the required parameter 'guid' is set
        if ($guid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $guid when calling searchVAT');
        }
        if ((strlen($guid) < 30)) {
            throw new \InvalidArgumentException('invalid length for "$guid" when calling VATApi.searchVAT, must be bigger than or equal to 30.');
        }

        // verify the required parameter 'company' is set
        if ($company === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company when calling searchVAT');
        }
        if ((strlen($company) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$company" when calling VATApi.searchVAT, must be smaller than or equal to 255.');
        }
        if ((strlen($company) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$company" when calling VATApi.searchVAT, must be bigger than or equal to 1.');
        }

        if (!is_null($city) && (strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling VATApi.searchVAT, must be smaller than or equal to 255.');
        }
        if (!is_null($city) && (strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$city" when calling VATApi.searchVAT, must be bigger than or equal to 1.');
        }

        if (!is_null($countryCode) && (strlen($countryCode) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$countryCode" when calling VATApi.searchVAT, must be smaller than or equal to 2.');
        }
        if (!is_null($countryCode) && (strlen($countryCode) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$countryCode" when calling VATApi.searchVAT, must be bigger than or equal to 2.');
        }

        if (!is_null($limit) && (strlen($limit) > 20)) {
            throw new \InvalidArgumentException('invalid length for "$limit" when calling VATApi.searchVAT, must be smaller than or equal to 20.');
        }
        if (!is_null($limit) && (strlen($limit) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$limit" when calling VATApi.searchVAT, must be bigger than or equal to 1.');
        }

        if (!is_null($minScore) && (strlen($minScore) > 10)) {
            throw new \InvalidArgumentException('invalid length for "$minScore" when calling VATApi.searchVAT, must be smaller than or equal to 10.');
        }
        if (!is_null($minScore) && (strlen($minScore) < 0)) {
            throw new \InvalidArgumentException('invalid length for "$minScore" when calling VATApi.searchVAT, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/vat/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($license !== null) {
            $formParams['license'] = $this->apiClient->getSerializer()->toFormValue($license);
        }
        // form params
        if ($guid !== null) {
            $formParams['guid'] = $this->apiClient->getSerializer()->toFormValue($guid);
        }
        // form params
        if ($company !== null) {
            $formParams['company'] = $this->apiClient->getSerializer()->toFormValue($company);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($countryCode !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($countryCode);
        }
        // form params
        if ($limit !== null) {
            $formParams['limit'] = $this->apiClient->getSerializer()->toFormValue($limit);
        }
        // form params
        if ($minScore !== null) {
            $formParams['min_score'] = $this->apiClient->getSerializer()->toFormValue($minScore);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\\VatSearchResponse',
                '/vat/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\\VatSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\VatSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorQuotaExceeded', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorIncorrectParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 428:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
